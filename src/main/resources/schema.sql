DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS films_genre;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS rating_MPA;
DROP TABLE IF EXISTS users;

create table if not exists rating_MPA (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name varchar(255) not null unique,
    rating_description varchar(255)
);
create table if not exists genre (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(255) not null unique
);
create table if not exists films (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255) not null ,
    description varchar(200),
    releaseDate date,
    duration int,
    rating_MPA int,
    foreign key (rating_MPA) references rating_MPA (id) on delete cascade on update cascade
);
create table if not exists films_genre (
    film_id bigint,
    genre_id int,
    foreign key (film_id) references films (id) on delete cascade on update cascade,
    foreign key (genre_id) references genre (id) on delete cascade on update cascade,
    primary key (film_id, genre_id)
);
create table if not exists users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(255) not null unique,
    login varchar(255) not null unique,
    name varchar(255) not null,
    birthday date
);
create table if not exists friends (
    first_friend bigint not null,
    second_friend bigint not null default false,
    status boolean,
    foreign key (first_friend) references users (id) on delete cascade on update cascade,
    foreign key (second_friend) references users (id) on delete cascade on update cascade,
    primary key (first_friend, second_friend)
);
create table if not exists likes (
    film_id bigint not null,
    user_id bigint not null,
    foreign key (film_id) references films (id) on delete cascade on update cascade,
    foreign key (user_id) references users (id) on delete cascade on update cascade,
    primary key (film_id, user_id)
);